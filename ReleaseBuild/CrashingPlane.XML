<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CrashingPlane</name>
    </assembly>
    <members>
        <member name="M:CrashingPlane.Screens.GameplayScreen.RestartGame">
            <summary>
            Muse be called when game state is changed from PressStart or from GameOver to Playing.
            GameplayScreen WILL NOT CALL BY ITSELF.
            </summary>
        </member>
        <member name="M:CrashingPlane.Vector2Extensions.ToDegree(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Gets the angle of a vector (in degrees). Zero pointing up, increasing clockwise.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:CrashingPlane.Vector2Extensions.ToRadians(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Gets the angle of a vector (in radians). Zero pointing up, increasing clockwise.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:CrashingPlane.Vector2Extensions.RadiansToVector(System.Single)">
            <summary>
            Gets the normal vector that has the angle.
            </summary>
            <param name="rad"></param>
            <returns></returns>
        </member>
        <member name="M:CrashingPlane.Vector2Extensions.RotateVector(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Gets the rotated vector from the original vector.
            </summary>
            <param name="originalVector"></param>
            <param name="radians"></param>
            <returns></returns>
        </member>
        <member name="M:CrashingPlane.Mapping.InGameTimer.Reset">
            <summary>
            Resets the in-game timespan to zero, and sets initial datetime to current in-game time.
            </summary>
        </member>
        <member name="P:CrashingPlane.Mapping.InGameTimer.InGameTimeSpan">
            <summary>
            Gets the in-game time span.
            This is typically the time span player spent playing the game.
            </summary>
        </member>
        <member name="P:CrashingPlane.Mapping.InGameTimer.InGameTime">
            <summary>
            Gets the in-game time. (initial datetime + in game timespan)
            </summary>
        </member>
        <member name="P:CrashingPlane.Mapping.InGameTimer.Brightness">
            <summary>
            Returns the fraction of gamescreen light. (1 = brightest, 0 = cantsee)
            </summary>
        </member>
        <member name="P:CrashingPlane.Mapping.InGameTimer.DaylightFraction">
            <summary>
            Returns the alpha fraction for daylight. (1 = full sun, 0 = full moon)
            </summary>
        </member>
        <member name="P:CrashingPlane.Mapping.InGameTimer.MoonRotation">
            <summary>
            Returns the rotation of moon. (0 = midnight, pi = noon)
            </summary>
        </member>
        <member name="M:CrashingPlane.Program.Main(System.String[])">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:CrashingPlane.Game1">
            <summary>
            This is the main type for your game
            </summary>
        </member>
        <member name="M:CrashingPlane.Game1.Initialize">
            <summary>
            Allows the game to perform any initialization it needs to before starting to run.
            This is where it can query for any required services and load any non-graphic
            related content.  Calling base.Initialize will enumerate through any components
            and initialize them as well.
            </summary>
        </member>
        <member name="M:CrashingPlane.Game1.LoadContent">
            <summary>
            LoadContent will be called once per game and is the place to load
            all of your content.
            </summary>
        </member>
        <member name="M:CrashingPlane.Game1.UnloadContent">
            <summary>
            UnloadContent will be called once per game and is the place to unload
            all content.
            </summary>
        </member>
        <member name="M:CrashingPlane.Game1.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Allows the game to run logic such as updating the world,
            checking for collisions, gathering input, and playing audio.
            </summary>
            <param name="gameTime">Provides a snapshot of timing values.</param>
        </member>
        <member name="M:CrashingPlane.Game1.Draw(Microsoft.Xna.Framework.GameTime)">
            <summary>
            This is called when the game should draw itself.
            </summary>
            <param name="gameTime">Provides a snapshot of timing values.</param>
        </member>
        <member name="M:CrashingPlane.Entities.Chopper.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CrashingPlane.Entities.Chopper.SetDead">
            <summary>
            Called when a deadly collision occurs. Sets player dead, and death animation is played.
            </summary>
        </member>
        <member name="M:CrashingPlane.Entities.Chopper.ApplyForce">
            <summary>
            Apply a force to the chopper. Has to be called every frame when holding.
            </summary>
        </member>
        <member name="P:CrashingPlane.Entities.Chopper.BoundingRectangle">
            <summary>
            Gets the bounding rectangle of the plane for collision tests.
            </summary>
        </member>
        <member name="P:CrashingPlane.Entities.Chopper.IsAlive">
            <summary>
            This indicates whether the backgrounds should still be scrolling.
            </summary>
        </member>
        <member name="P:CrashingPlane.Entities.Chopper.DeathAnimationPlayed">
            <summary>
            This indicates whether game over screen shall be displayed.
            </summary>
        </member>
        <member name="P:CrashingPlane.Entities.Chopper.Y">
            <summary>
            Returns Y coord of the chopper.
            </summary>
        </member>
        <member name="M:CrashingPlane.Mapping.ScrollingBackground.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D[],System.Single,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="textures">A set of background textures. Must have the same size.</param>
            <param name="speedX">Speed of scrolling on X axis</param>
        </member>
        <member name="T:CrashingPlane.ContentHolder">
            <summary>
            A staic class that holds all content assets.
            </summary>
        </member>
        <member name="M:CrashingPlane.World.ResetEntities">
            <summary>
            Should be called only by Gameplay Screen, when game resets or just initializes.
            </summary>
        </member>
        <member name="M:CrashingPlane.World.ApplyForceToPlayer">
            <summary>
            Called by Gameplay Screen, applies an upward force to player chopper. Only works when player is alive.
            </summary>
            <param name="force"></param>
        </member>
        <member name="M:CrashingPlane.World.Wait(System.Int32)">
            <summary>
            Pauses the update of world for a certain amount of time.
            </summary>
            <param name="countdownTime"></param>
        </member>
        <member name="P:CrashingPlane.World.EndOfGameplay">
            <summary>
            Returns true if player is dead and explosion is played.
            </summary>
        </member>
        <member name="P:CrashingPlane.World.TimeSpentFlying">
            <summary>
            Gets the time spent since last time in-game timer resets
            </summary>
        </member>
        <member name="P:CrashingPlane.Entities.BasicEntity.IsAlive">
            <summary>
            This indicates whether this entity shall still be used in collision tests.
            </summary>
        </member>
        <member name="P:CrashingPlane.GlobalHelper.RenderWidth">
            <summary>
            Gets the resolution width at which the game is rendering.
            </summary>
        </member>
        <member name="P:CrashingPlane.GlobalHelper.RenderHeight">
            <summary>
            Gets the resolution height at which the game is rendering.
            </summary>
        </member>
        <member name="P:CrashingPlane.GlobalHelper.IsRenderNative">
            <summary>
            A get only property indicating whether the game is rendering at native resolution.
            </summary>
        </member>
        <member name="P:CrashingPlane.GlobalHelper.RenderOrigin">
            <summary>
            Gets the origin point where the render target should be drawn.
            </summary>
        </member>
        <member name="P:CrashingPlane.Entities.AnimatedEntity.DeathAnimationPlayed">
            <summary>
            This indicates whether this entity shall be removed
            </summary>
        </member>
    </members>
</doc>
